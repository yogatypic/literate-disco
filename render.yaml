````bash
#!/usr/bin/env bash
set -euo pipefail

# Ce script doit √™tre lanc√© √† la racine de literate-disco (o√π se trouve render.yaml)
if [[ ! -f render.yaml ]]; then
  echo "‚ùå render.yaml introuvable. Placez-vous √† la racine du d√©p√¥t literate-disco."
  exit 1
fi

# V√©rifier la cl√© API
if [[ -z "${RENDER_API_KEY:-}" ]]; then
  echo "‚ùå Veuillez exporter RENDER_API_KEY avant de lancer le script."
  exit 1
fi

REPO="https://github.com/yogatypic/literate-disco.git"
BRANCH="main"
BLUEPRINT_NAME="literate-disco"

# 1) Cr√©er ou r√©cup√©rer le Blueprint
echo "üîç Cr√©ation ou r√©cup√©ration du Blueprint '$BLUEPRINT_NAME'‚Ä¶"
# Capturer la r√©ponse et le code HTTP
HTTP_CODE=$(curl -sS -o bp_response.json -w "%{http_code}" \
  -H "Authorization: Bearer $RENDER_API_KEY" \
  -H "Content-Type: application/json" \
  -X POST https://api.render.com/v1/blueprints \
  -d "{\"name\":\"$BLUEPRINT_NAME\",\"repo\":\"$REPO\",\"branch\":\"$BRANCH\"}")

if [[ "$HTTP_CODE" -ne 200 && "$HTTP_CODE" -ne 201 ]]; then
  echo "‚ùå √âchec de la cr√©ation/r√©cup√©ration du Blueprint (HTTP $HTTP_CODE)"
  echo "Body:" && cat bp_response.json
  exit 1
fi

BLUEPRINT_ID=$(jq -r .id bp_response.json)
echo "‚Üí Blueprint ID = $BLUEPRINT_ID"

# 2) Synchroniser le Blueprint (apply)
echo "üöÄ Synchronisation du Blueprint‚Ä¶"
HTTP_CODE=$(curl -sS -o sync_response.json -w "%{http_code}" \
  -H "Authorization: Bearer $RENDER_API_KEY" \
  -X POST https://api.render.com/v1/blueprints/$BLUEPRINT_ID/syncs \
  -d "{}")

if [[ "$HTTP_CODE" -ne 200 && "$HTTP_CODE" -ne 201 ]]; then
  echo "‚ùå √âchec de la synchronisation (HTTP $HTTP_CODE)"
  echo "Body:" && cat sync_response.json
  exit 1
fi

SYNC_ID=$(jq -r .id sync_response.json)
echo "‚Üí Sync d√©clench√©e, ID = $SYNC_ID"

# 3) Afficher le statut des derni√®res syncs
echo "‚ÑπÔ∏è Statut des derni√®res synchronisations :"
curl -sS \
  -H "Authorization: Bearer $RENDER_API_KEY" \
  https://api.render.com/v1/blueprints/$BLUEPRINT_ID/syncs | jq .

echo "‚úÖ Script termin√©."
```}]}

````

